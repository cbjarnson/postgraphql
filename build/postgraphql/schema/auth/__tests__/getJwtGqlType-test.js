"use strict";
jest.mock('jsonwebtoken');
var jsonwebtoken_1 = require("jsonwebtoken");
var graphql_1 = require("graphql");
var interface_1 = require("../../../../interface");
var getJwtGqlType_1 = require("../getJwtGqlType");
jsonwebtoken_1.sign.mockImplementation(function (tokenObject) { return tokenObject; });
test('will create a GraphQL scalar type', function () {
    expect(getJwtGqlType_1._createJwtGqlType({ name: 'foo' }) instanceof graphql_1.GraphQLScalarType).toBe(true);
});
test('will use the name from the named type', function () {
    expect(getJwtGqlType_1._createJwtGqlType({ name: 'foo_bar' }).name).toBe('FooBar');
});
test('will sign a JWT when serialized', function () {
    var jwtSecret = Symbol('jwtSecret');
    var type = getJwtGqlType_1._createJwtGqlType(new interface_1.BasicObjectType({
        name: 'foo',
        fields: new Map([
            ['a', { type: interface_1.integerType }],
            ['b', { type: interface_1.integerType }],
            ['c', { type: interface_1.integerType }],
            ['exp', { type: new interface_1.NullableType(interface_1.integerType) }],
        ]),
    }), jwtSecret);
    expect(type.serialize({ a: 1, b: 2, c: 3 })).toEqual({ a: 1, b: 2, c: 3 });
    expect(type.serialize({ a: 1, b: 2, c: 3, exp: 5000 })).toEqual({ a: 1, b: 2, c: 3, exp: 5000 });
    expect(jsonwebtoken_1.sign.mock.calls).toEqual([
        [{ a: 1, b: 2, c: 3 }, jwtSecret, { audience: 'postgraphql', issuer: 'postgraphql', expiresIn: '1 day' }],
        [{ a: 1, b: 2, c: 3, exp: 5000 }, jwtSecret, { audience: 'postgraphql', issuer: 'postgraphql', expiresIn: undefined }],
    ]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0Snd0R3FsVHlwZS10ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3Bvc3RncmFwaHFsL3NjaGVtYS9hdXRoL19fdGVzdHNfXy9nZXRKd3RHcWxUeXBlLXRlc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUE7QUFFekIsNkNBQThDO0FBQzlDLG1DQUEyQztBQUMzQyxtREFBa0Y7QUFDbEYsa0RBQW9EO0FBRXBELG1CQUFPLENBQUMsa0JBQWtCLENBQUMsVUFBQSxXQUFXLElBQUksT0FBQSxXQUFXLEVBQVgsQ0FBVyxDQUFDLENBQUE7QUFFdEQsSUFBSSxDQUFDLG1DQUFtQyxFQUFFO0lBQ3hDLE1BQU0sQ0FBQyxpQ0FBaUIsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxZQUFZLDJCQUFpQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ3BGLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLHVDQUF1QyxFQUFFO0lBQzVDLE1BQU0sQ0FBQyxpQ0FBaUIsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUNwRSxDQUFDLENBQUMsQ0FBQTtBQUVGLElBQUksQ0FBQyxpQ0FBaUMsRUFBRTtJQUN0QyxJQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDckMsSUFBTSxJQUFJLEdBQUcsaUNBQWlCLENBQUMsSUFBSSwyQkFBZSxDQUFDO1FBQ2pELElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDO1lBQ2QsQ0FBQyxHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsdUJBQVcsRUFBRSxDQUFDO1lBQzVCLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxFQUFFLHVCQUFXLEVBQUUsQ0FBQztZQUM1QixDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSx1QkFBVyxFQUFFLENBQUM7WUFDNUIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSx3QkFBWSxDQUFDLHVCQUFXLENBQUMsRUFBRSxDQUFDO1NBQ2pELENBQUM7S0FDSCxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMxRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFDaEcsTUFBTSxDQUFDLG1CQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUNqQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxDQUFDO1FBQ3pHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsQ0FBQztLQUN2SCxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSJ9