/* tslint:disable no-any */
"use strict";
var sql_1 = require("../sql");
test('raw will create a raw Sql item', function () {
    var text = 'abcdefg\'hijk-lmn"op';
    expect(sql_1.default.raw(text)).toEqual({ type: 'RAW', text: text });
});
test('identifier will create an identifier Sql item', function () {
    var name = 'abcdefg\'hijk-lmn"op';
    expect(sql_1.default.identifier(name)).toEqual({ type: 'IDENTIFIER', names: [name] });
});
test('identifier will create an identifier Sql item with multiple names', function () {
    var name1 = 'name1';
    var name2 = 'name2';
    var name3 = 'name3';
    expect(sql_1.default.identifier(name1, name2, name3)).toEqual({ type: 'IDENTIFIER', names: [name1, name2, name3] });
});
test('value will create an eager Sql value', function () {
    var value = Symbol('value');
    expect(sql_1.default.value(value)).toEqual({ type: 'VALUE', value: value });
});
test('join will flatten singly nested arrays', function () {
    var item1 = Symbol('item1');
    var item2 = Symbol('item2');
    var item3 = Symbol('item3');
    var item4 = Symbol('item4');
    var item5 = Symbol('item5');
    expect(sql_1.default.join([item1, [item2, item3], item4, [item5]])).toEqual([item1, item2, item3, item4, item5]);
});
test('join will add raw Sql seperators if supplied a string', function () {
    var seperator = Symbol('seperator');
    var item1 = Symbol('item1');
    var item2 = Symbol('item2');
    var item3 = Symbol('item3');
    expect(sql_1.default.join([item1, item2, item3], seperator))
        .toEqual([item1, sql_1.default.raw(seperator), item2, sql_1.default.raw(seperator), item3]);
});
test('join will not add raw Sql seperators between nested arrays', function () {
    var seperator = Symbol('seperator');
    var item1 = Symbol('item1');
    var item2 = Symbol('item2');
    var item3 = Symbol('item3');
    var item4 = Symbol('item4');
    var item5 = Symbol('item5');
    expect(sql_1.default.join([item1, [item2, item3], item4, [item5]], seperator))
        .toEqual([item1, sql_1.default.raw(seperator), item2, item3, sql_1.default.raw(seperator), item4, sql_1.default.raw(seperator), item5]);
});
test('query will output raw strings', function () {
    expect((_a = ["hello world"], _a.raw = ["hello world"], sql_1.default.query(_a))).toEqual([sql_1.default.raw('hello world')]);
    var _a;
});
test('query will add items to the Sql', function () {
    var item1 = Symbol('item1');
    var item2 = Symbol('item2');
    var item3 = Symbol('item3');
    expect((_a = ["hello ", "", " world ", ""], _a.raw = ["hello ", "", " world ", ""], sql_1.default.query(_a, item1, item2, item3)))
        .toEqual([sql_1.default.raw('hello '), item1, sql_1.default.raw(''), item2, sql_1.default.raw(' world '), item3, sql_1.default.raw('')]);
    var _a;
});
test('query will flatten arrays of items', function () {
    var item1 = Symbol('item1');
    var item2 = Symbol('item2');
    var item3 = Symbol('item3');
    expect((_a = ["", ""], _a.raw = ["", ""], sql_1.default.query(_a, [item1, item2, item3]))).toEqual([sql_1.default.raw(''), item1, item2, item3, sql_1.default.raw('')]);
    var _a;
});
test('compile will return an empty config for no items', function () {
    expect(sql_1.default.compile([])).toEqual({
        text: '',
        values: [],
    });
});
test('compile will turn a raw text only query into a simple config', function () {
    expect(sql_1.default.compile([sql_1.default.raw('hello world')])).toEqual({
        text: 'hello world',
        values: [],
    });
});
test('compile will add raw queries together', function () {
    expect(sql_1.default.compile([sql_1.default.raw('hello'), sql_1.default.raw(' '), sql_1.default.raw('world')])).toEqual({
        text: 'hello world',
        values: [],
    });
});
test('compile will add identifiers as text strings', function () {
    expect(sql_1.default.compile([sql_1.default.identifier('hello')])).toEqual({
        text: '"hello"',
        values: [],
    });
    expect(sql_1.default.compile([sql_1.default.identifier('a', 'b', 'c')])).toEqual({
        text: '"a"."b"."c"',
        values: [],
    });
});
test('compile will remove double quotes in identifiers', function () {
    expect(sql_1.default.compile([sql_1.default.identifier('yo"yo')])).toEqual({
        text: '"yo""yo"',
        values: [],
    });
});
test('compile will throw an error when identifiers are an empty array', function () {
    expect(function () { return sql_1.default.compile([sql_1.default.identifier()]); }).toThrow();
});
test('compile will add identifiers to raw queries', function () {
    expect(sql_1.default.compile([sql_1.default.raw('hello '), sql_1.default.identifier('a', 'b', 'c'), sql_1.default.raw(' world')])).toEqual({
        text: 'hello "a"."b"."c" world',
        values: [],
    });
});
test('compile will add value parameters for eager values', function () {
    var value = Symbol('value');
    expect(sql_1.default.compile([sql_1.default.value(value)])).toEqual({
        text: '$1',
        values: [value],
    });
});
test('compile will add multiple value parameters for eager values', function () {
    var value1 = Symbol('value1');
    var value2 = Symbol('value2');
    var value3 = Symbol('value3');
    var value4 = Symbol('value4');
    expect(sql_1.default.compile([sql_1.default.value(value1), sql_1.default.value(value2), sql_1.default.raw(' '), sql_1.default.value(value3), sql_1.default.raw(' '), sql_1.default.value(value4)])).toEqual({
        text: '$1$2 $3 $4',
        values: [value1, value2, value3, value4],
    });
});
test('compile will create local identifiers for symbols', function () {
    var a = Symbol();
    var b = Symbol();
    expect(sql_1.default.compile([sql_1.default.identifier(a), sql_1.default.raw(' '), sql_1.default.identifier(a, 'hello', b), sql_1.default.raw(' '), sql_1.default.identifier(b), sql_1.default.raw(' '), sql_1.default.identifier(a)])).toEqual({
        text: '__local_0__ __local_0__."hello".__local_1__ __local_1__ __local_0__',
        values: [],
    });
});
test('integration test 1', function () {
    expect(sql_1.default.compile((_a = ["hello ", " world, ", " and ", ""], _a.raw = ["hello ", " world, ", " and ", ""], sql_1.default.query(_a, sql_1.default.value(42), sql_1.default.value('cowabunga'), (_b = ["wow ", ""], _b.raw = ["wow ", ""], sql_1.default.query(_b, sql_1.default.identifier('yo'))))))).toEqual({
        name: undefined,
        text: 'hello $1 world, $2 and wow "yo"',
        values: [42, 'cowabunga'],
    });
    var _a, _b;
});
//# sourceMappingURL=data:application/json;base64,