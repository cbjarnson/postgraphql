"use strict";
var Inventory_1 = require("../Inventory");
test('addCollection will add a collection', function () {
    var inventory = new Inventory_1.default();
    var collection = {};
    expect(inventory.hasCollection(collection)).toBe(false);
    inventory.addCollection(collection);
    expect(inventory.hasCollection(collection)).toBe(true);
});
test('addCollection will not add a collection with the same name', function () {
    var inventory = new Inventory_1.default()
        .addCollection({ name: 'a' })
        .addCollection({ name: 'b' });
    expect(function () { return inventory.addCollection({ name: 'a' }); }).toThrow();
    expect(function () { return inventory.addCollection({ name: 'b' }); }).toThrow();
    inventory.addCollection({ name: 'c' });
    expect(function () { return inventory.addCollection({ name: 'c' }); }).toThrow();
});
test('getCollections will return all collections added by addCollection', function () {
    var inventory = new Inventory_1.default();
    var collectionA = { name: 'a' };
    var collectionB = { name: 'b' };
    var collectionC = { name: 'c' };
    expect(inventory.getCollections()).toEqual([]);
    inventory.addCollection(collectionA).addCollection(collectionB);
    expect(inventory.getCollections()).toEqual([collectionA, collectionB]);
    inventory.addCollection(collectionC);
    expect(inventory.getCollections()).toEqual([collectionA, collectionB, collectionC]);
});
test('getCollection will get a collection by name if it exists', function () {
    var inventory = new Inventory_1.default();
    expect(inventory.getCollection('a')).toBeFalsy();
    var collection = { name: 'a' };
    inventory.addCollection(collection);
    expect(inventory.getCollection('a')).toBe(collection);
});
test('hasCollection will return if the exact collection exists in the inventory', function () {
    var inventory = new Inventory_1.default();
    var collection1 = { name: 'a' };
    var collection2 = { name: 'a' };
    expect(inventory.hasCollection(collection1)).toBe(false);
    expect(inventory.hasCollection(collection2)).toBe(false);
    inventory.addCollection(collection1);
    expect(inventory.hasCollection(collection1)).toBe(true);
    expect(inventory.hasCollection(collection2)).toBe(false);
});
test('addRelation will fail unless both the head and tail collections exist in the inventory', function () {
    var inventory = new Inventory_1.default();
    var collection1 = { name: 'a' };
    var collection2 = { name: 'b' };
    var relation1 = { name: 'a', tailCollection: collection1, headCollectionKey: { collection: collection2 } };
    var relation2 = { name: 'b', tailCollection: collection2, headCollectionKey: { collection: collection1 } };
    expect(function () { return inventory.addRelation(relation1); }).toThrow();
    expect(function () { return inventory.addRelation(relation2); }).toThrow();
    inventory.addCollection(collection1);
    expect(function () { return inventory.addRelation(relation1); }).toThrow();
    expect(function () { return inventory.addRelation(relation2); }).toThrow();
    inventory.addCollection(collection2);
    inventory.addRelation(relation1);
    inventory.addRelation(relation2);
});
test('getRelations will get all of the relations that have been added to the inventory', function () {
    var inventory = new Inventory_1.default();
    var collection1 = { name: 'a' };
    var collection2 = { name: 'b' };
    var relation1 = { name: 'a', tailCollection: collection1, headCollectionKey: { collection: collection2 } };
    var relation2 = { name: 'b', tailCollection: collection2, headCollectionKey: { collection: collection1 } };
    expect(inventory.getRelations()).toEqual([]);
    expect(function () { return inventory.addRelation(relation1); }).toThrow();
    expect(function () { return inventory.addRelation(relation2); }).toThrow();
    expect(inventory.getRelations()).toEqual([]);
    inventory.addCollection(collection1);
    inventory.addCollection(collection2);
    inventory.addRelation(relation1);
    expect(inventory.getRelations()).toEqual([relation1]);
    inventory.addRelation(relation2);
    expect(inventory.getRelations()).toEqual([relation1, relation2]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW52ZW50b3J5LXRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW50ZXJmYWNlL19fdGVzdHNfXy9JbnZlbnRvcnktdGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsMENBQW9DO0FBRXBDLElBQUksQ0FBQyxxQ0FBcUMsRUFBRTtJQUMxQyxJQUFNLFNBQVMsR0FBRyxJQUFJLG1CQUFTLEVBQUUsQ0FBQTtJQUNqQyxJQUFNLFVBQVUsR0FBRyxFQUFFLENBQUE7SUFDckIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDdkQsU0FBUyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNuQyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUN4RCxDQUFDLENBQUMsQ0FBQTtBQUVGLElBQUksQ0FBQyw0REFBNEQsRUFBRTtJQUNqRSxJQUFNLFNBQVMsR0FBRyxJQUFJLG1CQUFTLEVBQUU7U0FDOUIsYUFBYSxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDO1NBQzVCLGFBQWEsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBRS9CLE1BQU0sQ0FBQyxjQUFNLE9BQUEsU0FBUyxDQUFDLGFBQWEsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUF0QyxDQUFzQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDOUQsTUFBTSxDQUFDLGNBQU0sT0FBQSxTQUFTLENBQUMsYUFBYSxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQXRDLENBQXNDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM5RCxTQUFTLENBQUMsYUFBYSxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDdEMsTUFBTSxDQUFDLGNBQU0sT0FBQSxTQUFTLENBQUMsYUFBYSxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQXRDLENBQXNDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtBQUNoRSxDQUFDLENBQUMsQ0FBQTtBQUVGLElBQUksQ0FBQyxtRUFBbUUsRUFBRTtJQUN4RSxJQUFNLFNBQVMsR0FBRyxJQUFJLG1CQUFTLEVBQUUsQ0FBQTtJQUNqQyxJQUFNLFdBQVcsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQTtJQUNqQyxJQUFNLFdBQVcsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQTtJQUNqQyxJQUFNLFdBQVcsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQTtJQUNqQyxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQzlDLFNBQVMsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQy9ELE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQTtJQUN0RSxTQUFTLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQ3BDLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUE7QUFDckYsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMsMERBQTBELEVBQUU7SUFDL0QsSUFBTSxTQUFTLEdBQUcsSUFBSSxtQkFBUyxFQUFFLENBQUE7SUFDakMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQTtJQUNoRCxJQUFNLFVBQVUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQTtJQUNoQyxTQUFTLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ25DLE1BQU0sQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQ3ZELENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLDJFQUEyRSxFQUFFO0lBQ2hGLElBQU0sU0FBUyxHQUFHLElBQUksbUJBQVMsRUFBRSxDQUFBO0lBQ2pDLElBQU0sV0FBVyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFBO0lBQ2pDLElBQU0sV0FBVyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFBO0lBQ2pDLE1BQU0sQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3hELE1BQU0sQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3hELFNBQVMsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDcEMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDdkQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDMUQsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMsd0ZBQXdGLEVBQUU7SUFDN0YsSUFBTSxTQUFTLEdBQUcsSUFBSSxtQkFBUyxFQUFFLENBQUE7SUFDakMsSUFBTSxXQUFXLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUE7SUFDakMsSUFBTSxXQUFXLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUE7SUFDakMsSUFBTSxTQUFTLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEVBQUUsQ0FBQTtJQUM1RyxJQUFNLFNBQVMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsRUFBRSxDQUFBO0lBQzVHLE1BQU0sQ0FBQyxjQUFNLE9BQUEsU0FBUyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsRUFBaEMsQ0FBZ0MsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ3hELE1BQU0sQ0FBQyxjQUFNLE9BQUEsU0FBUyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsRUFBaEMsQ0FBZ0MsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ3hELFNBQVMsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDcEMsTUFBTSxDQUFDLGNBQU0sT0FBQSxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxFQUFoQyxDQUFnQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDeEQsTUFBTSxDQUFDLGNBQU0sT0FBQSxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxFQUFoQyxDQUFnQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDeEQsU0FBUyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUNwQyxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ2hDLFNBQVMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDbEMsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMsa0ZBQWtGLEVBQUU7SUFDdkYsSUFBTSxTQUFTLEdBQUcsSUFBSSxtQkFBUyxFQUFFLENBQUE7SUFDakMsSUFBTSxXQUFXLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUE7SUFDakMsSUFBTSxXQUFXLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUE7SUFDakMsSUFBTSxTQUFTLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEVBQUUsQ0FBQTtJQUM1RyxJQUFNLFNBQVMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsRUFBRSxDQUFBO0lBQzVHLE1BQU0sQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDNUMsTUFBTSxDQUFDLGNBQU0sT0FBQSxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxFQUFoQyxDQUFnQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDeEQsTUFBTSxDQUFDLGNBQU0sT0FBQSxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxFQUFoQyxDQUFnQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDeEQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUM1QyxTQUFTLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQ3BDLFNBQVMsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDcEMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUNoQyxNQUFNLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQTtJQUNyRCxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ2hDLE1BQU0sQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQTtBQUNsRSxDQUFDLENBQUMsQ0FBQSJ9